name: CI/CD - Authentication Service

on:
  push:

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  SERVICE_NAME: "AuthenticationService"
  SERVICE_NAME_LOWER: "authenticationservice"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (con submodules si hay)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: List microservice folder files explicitly
        run: |
          echo "Listando archivos en la carpeta del microservicio:"
          ls -la ${{ github.workspace }}/microservices/${{ env.SERVICE_NAME }}

      - name: Confirm Dockerfile presence and show content
        run: |
          echo "Verificando existencia de Dockerfile:"
          if test -f ${{ github.workspace }}/microservices/${{ env.SERVICE_NAME }}/Dockerfile; then
            echo "Dockerfile existe:"
            head -20 ${{ github.workspace }}/microservices/${{ env.SERVICE_NAME }}/Dockerfile
          else
            echo "Dockerfile NO existe"
          fi

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}", "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}", "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}", "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Build and tag Docker image
        run: |
          cd ${{ github.workspace }}/microservices/${{ env.SERVICE_NAME }}
          docker build -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.SERVICE_NAME_LOWER }}:${{ github.sha }} -f Dockerfile .

      - name: Docker login
        run: docker login ${{ env.AZURE_ACR_NAME }}.azurecr.io -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Push Docker image to ACR
        run: docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.SERVICE_NAME_LOWER }}:${{ github.sha }}

      - name: Set AKS credentials
        uses: azure/aks-set-context@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}", "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}", "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}", "tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f ./kubernetes/authenticationservice-deployment.yaml
          kubectl apply -f ./kubernetes/authenticationservice-service.yaml
